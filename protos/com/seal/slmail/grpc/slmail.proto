syntax = "proto3";

package com.skiff.skemail.grpc;
option go_package = "github.com/skiff-org/skiff-world/protobuf/skemail";

message UUID {
    string value = 1;
}

message EmailRequest {
    UUID ID = 1;
}
message PublicKey {
    string key = 1;
    string signature = 2;
}
message SigningPublicKey {
    string key = 1;
}
message PublicKeyWithoutSignature {
    string key = 1;
}
message EncryptedData {
    string encryptedData = 1;
    string signature = 2;
    SigningPublicKey signedBy = 3;
}
message EncryptedSessionKey {
    string encryptedSessionKey = 1;
    string signature = 2;
    SigningPublicKey signedBy = 3;
    PublicKeyWithoutSignature encryptedBy = 5;
    reserved 4;
}

message SaveMessageRequest {
    UUID ID = 1;
    string smtpMessageID = 2;
}

message Attachment {
    message S3Location {
        string bucket = 1;
        string key = 2;
        string region = 3;
    }
    UUID ID = 1;
    // Encrypted metadata blob for attachments.
    EncryptedData encryptedAttachmentMetadata = 2;
    oneof attachmentLocation {
        S3Location s3Location = 3;
    }
}

message EmailResponse {
    message AddressObject {
        string address = 1;
        string name = 2;
    }

    AddressObject from = 1;
    repeated AddressObject to = 2;
    repeated AddressObject cc = 3;
    repeated AddressObject bcc = 4;
    string subject = 5 [deprecated = true];
    string body = 6 [deprecated = true];
    repeated Attachment attachment = 7;
    EncryptedSessionKey EncryptedSessionKey = 8;
    reserved 9;
    EncryptedData EncryptedMailSubject = 10;
    EncryptedData EncryptedMailHTML = 11;
    EncryptedData EncryptedMailText = 12;
    EncryptedData EncryptedMailTextAsHTML = 13;
    string senderUserID = 14;
    string smtpMessageID = 15;
    repeated string references = 16;
}

message EmptyResponse {
}

message UpdateStatusRequest {
    string ID = 1;
    string status = 2;
    string error = 3;
}

message CustomDomainsResponse {
    repeated string customDomains = 1;
}

message EmptyRequest {
}

message DisableUsersSendingRequest {
    repeated string userIDs = 1;
}

message EnableUsersSendingRequest {
    repeated string userIDs = 1;
}

message SkiffMailAliasesRequest {
    string userID = 1;
}

message SkiffMailAliasesResponse {
    repeated string skiffMailAliases = 1;
}

message UserCustomDomainsRequest {
    string orgID = 1;
}

message UserCustomDomainsResponse {
    repeated string customDomains = 1;
}

message CheckIfDomainsAvailableRequest {
    repeated string domains = 1;
    string userID = 2;
}


message CheckIfDomainsAvailableResponse {
    message Domain {
        bool available = 1;
        string currency = 2;
        string domain = 3;
        int32 period = 4;
        int32 price = 5;
    }
    repeated Domain domains = 1;
}

message PurchaseCustomDomainRequest {
  string domain = 1;
  string userID = 2;
}

message PurchaseCustomDomainResponse {
    string domainID = 1;
}

message GetDomainRenewalDetailsRequest {
    string domain = 1;
}

message GetDomainRenewalDetailsResponse {
    bool renewable = 1;
    string domain = 2;
    string domainStatus = 3;
    int32 price = 4;
    string currency = 5;
}

message RenewCustomDomainRequest {
    string domainID = 1;
}

message RenewCustomDomainResponse {
    string domainID = 1;
}

message DeleteCustomDomainRequest {
    string domainID = 1;
    repeated string allOrgMemberUserIDs = 2;
}

message CreateSkiffMailAccountRequest {
    string userID = 1;
    string emailAlias = 2;
    PublicKey publicKey = 3;
    SigningPublicKey signingPublicKey = 4;
    string orgID = 5;
}

message SendEmailToSkiffUserRequest {
    string subject = 1;
    string htmlContent = 2;
    string textContent = 3;
    string toEmail = 4;
}

message GetUserLabelAndFolderCountsRequest {
    string userID = 1;
}

message GetUserLabelAndFolderCountsResponse {
    int32 labelCount = 1;
    int32 folderCount = 2;
}

message UserPaidMailFeatureUsageRequest {
    string userID = 1;
    string orgID = 2;
}

message UserPaidMailFeatureUsageResponse {
    message PaidMailFeatureUsage {
        int32 mailOnlyStorageUsageInMb = 1;
        int32 numNonWalletSkiffAliases = 2;
        int32 numShortSkiffAliases = 3;
        int32 numCustomDomains = 4;
        int32 numUserLabels = 5;
        int32 numUserFolders = 6;
        int32 numUserMailFilters = 7;
    }
    PaidMailFeatureUsage paidMailFeatureUsage = 1;
}

message DisableOrDeleteAllUserEmailAliasesRequest {
    string userID = 1;
    bool hasTemporaryPassword = 2;
}

message DisableOrDeleteAllUserEmailAliasesResponse {
    bool disableOrDeleteAliasesSuccess = 1;
}

service Skemail {
    rpc CreateSkiffMailAccount(CreateSkiffMailAccountRequest) returns (EmptyResponse) {}
    rpc GetEmail(EmailRequest) returns (EmailResponse) {}
    rpc SaveMessageID(SaveMessageRequest) returns (EmptyResponse) {}
    rpc UpdateStatus(UpdateStatusRequest) returns (EmptyResponse) {}
    rpc GetAllCustomDomains(EmptyRequest) returns (CustomDomainsResponse) {}
    rpc DisableUsersSending(DisableUsersSendingRequest) returns (EmptyResponse) {}
    rpc EnableUsersSending(EnableUsersSendingRequest) returns (EmptyResponse) {}
    rpc GetSkiffMailAliases(SkiffMailAliasesRequest) returns (SkiffMailAliasesResponse) {}
    rpc GetUserCustomDomains(UserCustomDomainsRequest) returns (UserCustomDomainsResponse) {}
    rpc CheckIfDomainsAvailable(CheckIfDomainsAvailableRequest) returns (CheckIfDomainsAvailableResponse) {}
    rpc PurchaseCustomDomain(PurchaseCustomDomainRequest) returns (PurchaseCustomDomainResponse) {}
    rpc GetDomainRenewalDetails(GetDomainRenewalDetailsRequest) returns (GetDomainRenewalDetailsResponse) {}
    rpc RenewCustomDomain(RenewCustomDomainRequest) returns (RenewCustomDomainResponse) {}
    rpc DeleteCustomDomain(DeleteCustomDomainRequest) returns (EmptyResponse) {}
    rpc SendEmailToSkiffUser(SendEmailToSkiffUserRequest) returns (EmptyResponse) {}
    rpc GetUserPaidMailFeatureUsage(UserPaidMailFeatureUsageRequest) returns (UserPaidMailFeatureUsageResponse) {}
    rpc GetUserLabelAndFolderCounts(GetUserLabelAndFolderCountsRequest) returns (GetUserLabelAndFolderCountsResponse) {}
    rpc DisableOrDeleteAllUserEmailAliases(DisableOrDeleteAllUserEmailAliasesRequest) returns (DisableOrDeleteAllUserEmailAliasesResponse) {}
}
