syntax = "proto3";

package com.skiff.editor.grpc;
option go_package = "github.com/skiff-org/skiff-world/protobuf/editor";

message UUID {
    string value = 1;
}

message EmptyResponse {
}

message SubscriptionTierRequest {
    UUID userID = 1;
}

message SubscriptionTierResponse {
    string tier = 1;
}

message StorageUsageLimitsRequest {
  UUID userID = 1;
}

message StorageUsageLimitsResponse {
  double limitBytes = 1;
  double usageBytes = 2;
}

message UserTagsRequest {
    UUID userID = 1;
}

message UserTagsResponse {
    repeated string tags = 1;
}

message RootOrgIDRequest {
    UUID userID = 1;
}

message RootOrgIDResponse {
    UUID orgID = 1;
}

message CaptchaRequest {
    string captchaToken = 1;
    string userIP = 2;
    UUID userID = 3;
    string behaviorType = 4;
    bool behaviorSuccess = 5;
    string rawHeaders = 6;
    bool isPassive = 7;
    string messageID = 8;
    optional string emailAlias = 9;
}

message CaptchaResponse {
    bool captchaSuccess = 1;
}

message GetAdminUserIDsForOrgRequest {
    repeated string orgIDs = 1;
}

message GetAdminUserIDsForOrgResponse {
    message AdminsForOrg {
        string orgID = 1;
        repeated string adminUserIDs = 2;
    }
    repeated AdminsForOrg orgUserIDs = 1;
}

message DisableUserRequest {
    string userID = 1;
}

message GetUserOrgPermissionRequest {
    string userID = 1;
}
message GetUserOrgPermissionResponse {
    string permission = 1;
    string orgID = 2;
}

message CancelCustomDomainSubscriptionRequest {
    string domainID = 1;
}

message CancelCustomDomainSubscriptionResponse {
    bool cancelCustomDomainSubscriptionSuccess = 1;
}

message GetAllUserIDsForOrgRequest {
    string orgID = 1;
}

message GetAllUserIDsForOrgResponse {
    repeated string allUserIDsForOrg = 1;
}

message GrantUserOneTimeCreditRequest {
    string userID = 1;
    string creditReason = 2;
    string aliasToNotify = 3;
}

service Editor {
    rpc GetSubscriptionTier(SubscriptionTierRequest) returns (SubscriptionTierResponse) {}
    rpc GetStorageUsageLimits(StorageUsageLimitsRequest) returns (StorageUsageLimitsResponse) {}
    rpc GetUserTags(UserTagsRequest) returns (UserTagsResponse) {}
    rpc GetRootOrgID(RootOrgIDRequest) returns (RootOrgIDResponse) {}
    rpc VerifyCaptcha(CaptchaRequest) returns (CaptchaResponse) {}
    rpc GetAdminUserIDsForOrg(GetAdminUserIDsForOrgRequest) returns (GetAdminUserIDsForOrgResponse) {}
    rpc DisableUser(DisableUserRequest) returns (EmptyResponse) {}
    rpc GetUserOrgPermission(GetUserOrgPermissionRequest) returns (GetUserOrgPermissionResponse) {}
    rpc CancelCustomDomainSubscription(CancelCustomDomainSubscriptionRequest) returns (CancelCustomDomainSubscriptionResponse) {}
    rpc GetAllUserIDsForOrg(GetAllUserIDsForOrgRequest) returns (GetAllUserIDsForOrgResponse) {}
    rpc GrantUserOneTimeCredit(GrantUserOneTimeCreditRequest) returns (EmptyResponse) {}
}
